[tool.poetry]
name = "vkr"
version = "0.1.0"
description = ""
authors = ["Глеб Храмов <assaa2015@mal.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
sqlalchemy = "^2.0.38"
fastapi = "^0.115.11"
asyncpg = "^0.30.0"
gunicorn = "^23.0.0"
psycopg = "^3.2.5"
pydantic = {extras = ["email"], version = "^2.10.6"}
pydantic-settings = "^2.8.1"
uvicorn = "^0.34.0"
requests = "^2.32.3"
alembic = "^1.15.1"
asyncio = "^3.4.3"
sqladmin = "^0.20.1"
passlib = "^1.7.4"
python-jose = "^3.4.0"
bcrypt = "^4.3.0"
itsdangerous = "^2.2.0"
types-passlib = "^1.7.7.20250322"
enum34 = "^1.1.10"




[tool.poetry.group.dev.dependencies]
ruff = "^0.10.0"
mypy = "^1.15.0"
pre-commit = "^4.1.0"
pytest = "^8.3.5"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.25.3"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = true
asyncio_mode = "auto"
testpaths = "tests"
addopts = "-p no:warnings"
env_files = [".env"]
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true

#[tool.mypy]
#files = "."
#show_error_summary = false
#ignore_missing_imports = true
#disallow_untyped_defs = true
#disallow_incomplete_defs = true
#warn_return_any = true
#warn_unused_configs = true

[tool.ruff]
# Включите или отключите правила
#select = ["E", "F"]  # Пример: включить PEP8 ошибки (E) и ошибки форматирования (F)
#ignore = ["E501"]    # Пример: игнорировать длину строки

# Настройка максимальной длины строки
line-length = 88

# Дополнительные настройки
#[tool.ruff.per-file-ignores]
#"__init__.py" = ["F401"]  # Игнорировать неиспользуемые импорты в __init__.py

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
